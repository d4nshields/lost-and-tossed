name: Release & Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 0.1.0)'
        required: true
        default: '0.1.0'
      deploy_to_play:
        description: 'Deploy to Google Play'
        type: boolean
        default: false

jobs:
  build-and-release:
    name: Build & Release Android
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.8'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Determine version name
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Extract version from release tag (remove 'v' prefix if present)
          VERSION_NAME="${{ github.event.release.tag_name }}"
          VERSION_NAME=${VERSION_NAME#v}
        else
          # Use manual input
          VERSION_NAME="${{ github.event.inputs.version_name }}"
        fi
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "Version name: $VERSION_NAME"
    
    - name: Generate version code
      id: version_code
      run: |
        # Generate timestamp-based version code
        VERSION_INFO=$(dart scripts/generate_version.dart "${{ steps.version.outputs.VERSION_NAME }}")
        VERSION_NAME=$(echo "$VERSION_INFO" | grep "VERSION_NAME=" | cut -d'=' -f2)
        VERSION_CODE=$(echo "$VERSION_INFO" | grep "VERSION_CODE=" | cut -d'=' -f2)
        
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "FULL_VERSION=$VERSION_NAME+$VERSION_CODE" >> $GITHUB_OUTPUT
        
        echo "Final version: $VERSION_NAME ($VERSION_CODE)"
    
    - name: Update pubspec.yaml with version
      run: |
        sed -i "s/^version: .*/version: ${{ steps.version_code.outputs.FULL_VERSION }}/" pubspec.yaml
        echo "Updated pubspec.yaml:"
        grep "^version:" pubspec.yaml
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Create release keystore from secrets
      run: |
        echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > android/app/lost-and-tossed-upload-key.p12
    
    - name: Create key.properties
      run: |
        cat > android/key.properties << EOF
        storePassword=${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.KEY_PASSWORD }}
        keyAlias=${{ secrets.KEY_ALIAS }}
        storeFile=app/lost-and-tossed-upload-key.p12
        EOF
    
    - name: Build App Bundle
      run: flutter build appbundle --release
    
    - name: Build APK
      run: flutter build apk --release
    
    - name: Sign App Bundle (verify)
      run: |
        jarsigner -verify -verbose -certs build/app/outputs/bundle/release/app-release.aab
        echo "âœ… App Bundle signature verified"
    
    - name: Upload artifacts to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: lost-and-tossed-${{ steps.version_code.outputs.VERSION_NAME }}.aab
        asset_content_type: application/octet-stream
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: lost-and-tossed-${{ steps.version_code.outputs.VERSION_NAME }}-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
    
    - name: Upload App Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: lost-and-tossed-${{ steps.version_code.outputs.VERSION_NAME }}-aab
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: 90

  # Future: Add Google Play deployment job
  # deploy-to-play:
  #   name: Deploy to Google Play
  #   runs-on: ubuntu-latest
  #   needs: build-and-release
  #   if: github.event_name == 'release' || github.event.inputs.deploy_to_play == 'true'
  #   
  #   steps:
  #   - name: Download App Bundle
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: lost-and-tossed-${{ needs.build-and-release.outputs.VERSION_NAME }}-aab
  #   
  #   - name: Deploy to Google Play
  #     uses: r0adkll/upload-google-play@v1
  #     with:
  #       serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
  #       packageName: com.tinkerplex.lost_and_tossed
  #       releaseFiles: app-release.aab
  #       track: internal  # Start with internal testing
  #       status: completed
